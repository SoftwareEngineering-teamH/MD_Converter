import java.util.ArrayList;

public class PlainVisitor implements MDElementVisitor
{
	public void visitDocument(Document doc)
	{
		for(int i = 0; i<doc.node_list.size(); i++)
		{
			doc.node_list.get(i).accept(new PlainVisitor());
			doc.html_data += doc.node_list.get(i).html_data;
		}
	}
	
	public void visitNode(Node node)
	{
		String content = new String();
		String tmp_id = new String();
		String image_path = new String();
		boolean link_flag = false;
		boolean img_flag = false;
		
		ArrayList<Character>plain = new ArrayList<Character>();
		
		// node start tag generate
		content += node.setStartTag();
		
		// token_list each convert!
		for(int i=0;i<node.token_list.size(); i++)
		{
			if(link_flag == true || img_flag == true)
			{
				char c = node.token_list.get(i).data.charAt(0);
				plain.add(c);
			}
			else
			{	//Plain!
				if(node.token_list.get(i).token_type == 1)
				{
					char c = node.token_list.get(i).data.charAt(0);
					plain.add(c);
				}
				else if(node.token_list.get(i).token_type != 1)
				{
					String str = this.Charlist2String(plain);
					content = content.concat(str);
					plain = new ArrayList<Character>();
				}
				//Style!
				if(node.token_list.get(i).token_type == 2 && node.token_list.get(i+1).token_type == 2)
				{
					content = content.concat("<strong>");
					i++;
				}
				else if(node.token_list.get(i).token_type == 2 && node.token_list.get(i+1).token_type != 2)
				{
					content = content.concat("<em>");
				}
				else if(node.token_list.get(i).token_type == 22 && node.token_list.get(i+1).token_type == 22 )
				{
					content = content.concat("</strong>");
					i++;
				}
				else if(node.token_list.get(i).token_type == 22 && node.token_list.get(i+1).token_type != 22)
				{
					content = content.concat("</em>");
				}
				
				//Escape!
				if(node.token_list.get(i).token_type == 3)
				{
					
				}
				
			}
			//link!
			if(node.token_list.get(i).token_type == 4)
				link_flag = true;
			else if(node.token_list.get(i).token_type == 44)
			{
				link_flag = false;
				plain.remove(plain.size()-1);
				String id = this.Charlist2String(plain);
				tmp_id = id;
				plain = new ArrayList<Character>();
			}
			else if(node.token_list.get(i).token_type == 444)
				link_flag = true;
			else if(node.token_list.get(i).token_type == 4444)
			{
				link_flag = false;
				plain.remove(plain.size()-1);
				String link = this.Charlist2String(plain);
				plain = new ArrayList<Character>();
				String a = " ";
				if(link.contains(a) == true)
				{
					String s[] = link.split(" ");
					String str = "<a href=\"" + s[0] + "\" title =" + s[1] + ">" + tmp_id + "</a>";
					content=content.concat(str);
				}else
				{
					String str = "<a href=\"" + link + "\">"+tmp_id + "</a>"; 
					content=content.concat(str);
				}
			}
			
			//image!
			if(node.token_list.get(i).token_type == 5)
				img_flag = true;
			else if(node.token_list.get(i).token_type == 55)
			{
				img_flag = false;
				plain.remove(plain.size()-1);
				String Alt = this.Charlist2String(plain);
				String s[] = Alt.split(" ");
				tmp_id = s[1];
				plain = new ArrayList<Character>();
			}
			else if(node.token_list.get(i).token_type == 555)
				img_flag = true;
			else if(node.token_list.get(i).token_type == 5555)
			{
				img_flag = false;
				plain.remove(plain.size()-1);
				String img = this.Charlist2String(plain);
				plain = new ArrayList<Character>();
				String a = " ";
				if(img.contains(a) == true)
				{
					String s[] = img.split(" ");
					image_path = s[0];
					String str = "img src=\"" + image_path + "\" title=" + s[1] + "alt="+tmp_id + ">"; 
					content = content.concat(str);
				}
				else
				{
					String str = "<img src=\"" + img + "alt="+tmp_id + ">"; 
					content=content.concat(str);
				}
			}
			
			//html code!
			if(node.token_list.get(i).token_type == 6)
			{
				
			}
			
		}
		
		// node finish tag generate
		content += node.setEndTag();
		content += "\n";
		
		//node.html_data += 
		node.html_data += content;
	}
	
	//Arraylist -> string
	public String Charlist2String(ArrayList<Character> list)
	{
		StringBuilder builder = new StringBuilder(list.size());
		for(Character ch: list)
			builder.append(ch);
		
		return builder.toString();
	}
	
	/*
	public void visitToken(Token token)
	{
		
	}
	*/
}
